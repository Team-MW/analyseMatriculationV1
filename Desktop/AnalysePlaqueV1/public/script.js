  const video = document.getElementById('video');       // √âl√©ment vid√©o pour afficher le flux de la cam√©ra
  const canvas = document.getElementById('canvas');     // √âl√©ment canvas pour capturer une image du flux
  const context = canvas.getContext('2d');              // Contexte 2D du canvas pour dessiner l'image
  const resultDiv = document.getElementById('result');  // Div pour afficher le r√©sultat du scan

  //  Variables de contr√¥le
  let lastDetectedPlate = '';   // Stocke la derni√®re plaque d√©tect√©e pour √©viter les doublons
  let isScanning = false;       // Emp√™che les scans multiples simultan√©s

  //  Acc√®s √† la cam√©ra arri√®re du dispositif
  navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
    .then(stream => video.srcObject = stream); // Affiche le flux vid√©o dans l'√©l√©ment <video>

  //  Fonction de capture d'image toutes les 3 secondes
  function capture() {
    // V√©rifie que la vid√©o est pr√™te et qu'un scan n'est pas d√©j√† en cours
    if (video.readyState !== 4 || isScanning) return;

    // D√©finit les dimensions du canvas selon la vid√©o
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    // Dessine l'image actuelle de la vid√©o sur le canvas
    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    // Convertit le canvas en blob PNG et l'envoie √† la fonction OCR
    canvas.toBlob(sendToOCR, 'image/png');
  }

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

  // Envoie l'image captur√©e au serveur OCR et traite la r√©ponse
  function sendToOCR(blob) {
    isScanning = true; // Active le verrou de scan 

    // Cr√©e un formulaire avec l'image √† envoyer
    const formData = new FormData();
    formData.append('image', blob, 'capture.png');

    // Envoie la requ√™te
    fetch('http://localhost:8080/ocr', {
      method: 'POST',
      body: formData
    })
    .then(res => res.json()) // Convertit la r√©ponse en JSON
    .then(data => {
      // Si une plaque est d√©tect√©e et diff√©rente de la pr√©c√©dente
      if (data.text && data.text !== lastDetectedPlate) {
        lastDetectedPlate = data.text; // Met √† jour la derni√®re plaque

        // üîì Cas d'acc√®s autoris√©
        if (data.statut === 'Autoris√©') {
          resultDiv.textContent = `‚úÖ Acc√®s autoris√© pour ${data.proprietaire || 'propri√©taire inconnu'}`;
          resultDiv.className = 'status-success';

        //  Cas d'acc√®s interdit
        } else if (data.statut === 'Non autoris√©') {
          resultDiv.textContent = `‚ùå Acc√®s interdit ‚Äì ${data.message || 'Plaque non reconnue'}`;
          resultDiv.className = 'status-error';

        //  Cas de r√©ponse inattendue
        } else {
          resultDiv.textContent = '‚ö†Ô∏è R√©ponse inattendue du serveur.';
          resultDiv.className = 'status-warning';
        }
      }
    })
    .finally(() => {
      isScanning = false; // Lib√®re le verrou de scan
    });
  }

  // ‚è±Ô∏è Lance la capture toutes les 3 secondes
  setInterval(capture, 3000);